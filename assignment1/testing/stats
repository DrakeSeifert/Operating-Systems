#!/bin/bash

#Checks for correct number of arguments
if [ "$#" -ne 1 ] && [ "$#" -ne 2 ]
then
	(>&2 echo "Usage: stats {-rows|-cols} [file]")
	exit 1
fi

#initial = first two chars of first arg
initial="$(echo $1 | head -c 2)"

#check arg 1 begins with "-r" or "-c"
if [ "$initial" != "-r" ] && [ "$initial" != "-c" ]
then
	(>&2 echo "Usage: stats {-rows|-cols} [file]")
	exit 1
fi

#Check if optional file entered as parameter
if [ ! -z $2 ]
then
	#Check that file has read permissons
	if [ ! -r $2 ]
	then
		(>&2 echo "stats: cannot read $2" )
		exit 1
	fi

	#if so, check if file exists in current directory
	if [ ! -f "$2" ]
	then
		(>&2 echo "stats: cannot read" $2 )
		exit 1
	fi
	#check if file is empty
	if [ ! -s "$2" ]
	then
		(>&2 echo "Error, empty file" $2 )
		exit 1
	fi
fi

#If only one parameter, set variable to read from stdin
#otherwise read from 2nd parameter
readme="datafile$$"
trap "rm -f $readme" EXIT

if [ "$#" = "1" ]
then
	cat > "$readme"

elif [ "$#" = "2" ]
then
	readme=$2
fi

#If columns selected, create temp file with switched rows and cols
if [ "$initial" == "-c" ]
then
	colFile="tempColFile$$"
	trap "rm -f $colFile" EXIT
	awk '
	{
		for(i=1; i<=NF; i++) {
			a[NR,i] = $i
		}
	}
	NF>p { p = NF }
	END {
		for(j=1; j<=p; j++) {
			str=a[1,j]
			for(i=2; i<=NR; i++){
				str=str" "a[i,j];
			}
			print str
	   	}
	}' $readme > $colFile

	#If reading from stdin, remove copy
	if [ "$#" = "1" ]
	then
		temp=$readme
		readme=$colFile
		rm $temp
	else
		readme=$colFile
	fi
fi

echo "Average Median"

#calc logic
LineNum=0
while read myLine
do
	sum=0
	count=0
	average=0
	LineNum=`expr $LineNum + 1`

	#count number of columns and sum numbers on a row
	for i in $myLine
	do
		num=$i
		count=`expr $count + 1`
		sum=`expr $sum + $num`
	done

	#create an array of each number in a row
	myArray=()
	for i in $myLine
	do
		myArray+=($i)
	done

	#sort array, then take middle value for median
	myArray=( $( for i in "${myArray[@]}"; do echo "$i"; done | sort -n))
	median=${myArray[($count/2)]}

	#find average with decimal value
	ave=$(echo "scale=2; $sum/$count" | bc)
	
	#if decimal ends in .50, round up
	if [ "${ave#*.}" == "50" ]
	then
		ave=`expr $(printf "%.0f" $ave) + 1`
	else
		ave=$(printf "%.0f" $ave)
	fi

	#finally, print results to the screen
	echo -e $ave "\t" $median

done < $readme

#If columns selected, remove temp colFile
if [ "$initial" == "-c" ]
then
	rm $readme

#if stdin was read from, remove file
elif [ "$#" = "1" ]
then
	rm "$readme"
fi
